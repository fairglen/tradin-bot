// Code generated by counterfeiter. DO NOT EDIT.
package exchangesfakes

import (
	"sync"

	"github.com/fairglen/tradin-bot/internal/exchanges"
)

type FakeClient struct {
	CreateOrderStub        func(exchanges.Order) error
	createOrderMutex       sync.RWMutex
	createOrderArgsForCall []struct {
		arg1 exchanges.Order
	}
	createOrderReturns struct {
		result1 error
	}
	createOrderReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CreateOrder(arg1 exchanges.Order) error {
	fake.createOrderMutex.Lock()
	ret, specificReturn := fake.createOrderReturnsOnCall[len(fake.createOrderArgsForCall)]
	fake.createOrderArgsForCall = append(fake.createOrderArgsForCall, struct {
		arg1 exchanges.Order
	}{arg1})
	stub := fake.CreateOrderStub
	fakeReturns := fake.createOrderReturns
	fake.recordInvocation("CreateOrder", []interface{}{arg1})
	fake.createOrderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) CreateOrderCallCount() int {
	fake.createOrderMutex.RLock()
	defer fake.createOrderMutex.RUnlock()
	return len(fake.createOrderArgsForCall)
}

func (fake *FakeClient) CreateOrderCalls(stub func(exchanges.Order) error) {
	fake.createOrderMutex.Lock()
	defer fake.createOrderMutex.Unlock()
	fake.CreateOrderStub = stub
}

func (fake *FakeClient) CreateOrderArgsForCall(i int) exchanges.Order {
	fake.createOrderMutex.RLock()
	defer fake.createOrderMutex.RUnlock()
	argsForCall := fake.createOrderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateOrderReturns(result1 error) {
	fake.createOrderMutex.Lock()
	defer fake.createOrderMutex.Unlock()
	fake.CreateOrderStub = nil
	fake.createOrderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateOrderReturnsOnCall(i int, result1 error) {
	fake.createOrderMutex.Lock()
	defer fake.createOrderMutex.Unlock()
	fake.CreateOrderStub = nil
	if fake.createOrderReturnsOnCall == nil {
		fake.createOrderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createOrderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrderMutex.RLock()
	defer fake.createOrderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exchanges.Client = new(FakeClient)
